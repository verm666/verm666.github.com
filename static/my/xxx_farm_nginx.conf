log_format farm_log '$remote_addr - $remote_user [$time_local] '
  '"$request" $status $body_bytes_sent '
  '"$http_referer" "$http_user_agent"'
  ' [shard: $shard, backend: $backend]' ' $secure_download_status';

map $shard $backend {
  1 x.x.x.x:5000;
  2 x.x.x.x:5000;
  3 x.x.x.x:5000;
  ...
  64 y.y.y.y:5000;
}

proxy_cache_path /var/lib/nginx/cache levels=1:2 keys_zone=cache:30m max_size=1G;

perl_set $shard '
use bigint;

sub djb2 {
    my $uuid = shift(@_);

    my $hash = 5381;

    for (my $i=0; $i<=length($uuid)-1; $i++) {
        $hash = (($hash << 5) + $hash) + ord(substr($uuid, length($uuid)-$i, 1));
    }   

    return $hash;
}

sub {
    my $r = shift;

    my $uuid = $r->variable("uuid");

    my $hash = djb2($uuid);
    my $id = $hash % 64;

    return "$id";
}
';


server {
  listen 8080;
  
  access_log /var/log/nginx/video-internal.log farm_log;

  location /internal_video {
    internal;
    alias /storage/video/$shard/;
  }

  location ~ "^/video/(.*)/(.*)-(.*).mp4$" {

    set $secure_download_status not_use;

    set $uuid $1;
    set $begin $2;
    set $end $3;

    root /storage/video/;
    
    proxy_cache cache;
    proxy_cache_lock on;
    proxy_cache_lock_timeout 600s;
    proxy_cache_key $request_uri;
    proxy_cache_valid 200 10m;

    proxy_read_timeout 600;

    proxy_pass http://$backend/convert/$uuid/$begin/$end/$shard;
  }
}

server {
  listen 80;

  access_log /var/log/nginx/video.log farm_log;

  location ~ "^/video/(.*)/(.*)-(.*).mp4/(.*)/(.*)" {

    set $uuid $1;
    set $begin $2;
    set $end $3;

    secure_download on; 
    secure_download_secret password;
    secure_download_path_mode file;

    if ($secure_download = "-1") {
      set $secure_download_status secure_download_timestamp_is_expired;
      return 404;
    }   
    if ($secure_download = "-2") {
      set $secure_download_status secure_download_md5_hash_is_wrong;
      return 404;
    }   
    if ($secure_download = "-3") {
      set $secure_download_status secure_download_other_problem;
      return 404;
    }   

    set $secure_download_status valid;

    root /storage/video/;
    
    try_files /$shard/$uuid/$begin-$end.mp4 @backend;
  }

  location /internal_video {
    internal;
    alias /storage/video/$shard/;
  }

  location @backend {
    proxy_cache cache;
    proxy_cache_lock on;
    proxy_cache_lock_timeout 600s;
    proxy_cache_key $request_uri;
    proxy_cache_valid 200 10m;

    proxy_read_timeout 600;

    proxy_pass http://$backend/convert/$uuid/$begin/$end/$shard;
  }
}
