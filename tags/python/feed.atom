<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>http://verm666.github.com/feed.atom</id>
  <updated>2011-10-07T00:00:00Z</updated>
  <link href="http://verm666.github.com/" />
  <link href="http://verm666.github.com/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://verm666.github.com/feed.atom">
    <title type="text">Python Bookmarks</title>
    <id>http://verm666.github.com/2011/09/20/python_bookmarks</id>
    <updated>2011-09-20T00:00:00Z</updated>
    <link href="http://verm666.github.com/2011/09/20/python_bookmarks" />
    <author>
      <name>verm666</name>
    </author>
    <content type="html">&lt;div class="section" id="books"&gt;
&lt;h2&gt;Books&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;David M. Beazley - Python Essential Reference, 4th Edition&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="gil"&gt;
&lt;h2&gt;GIL&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;David M. Beazley - PyCon 2010:Understanding the Python GIL (#82) - &lt;a class="reference external" href="http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2010-understanding-the-python-gil-82-3273690"&gt;http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2010-understanding-the-python-gil-82-3273690&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://verm666.github.com/feed.atom">
    <title type="text">Supervisord</title>
    <id>http://verm666.github.com/2011/10/07/supervisord</id>
    <updated>2011-10-07T00:00:00Z</updated>
    <link href="http://verm666.github.com/2011/10/07/supervisord" />
    <author>
      <name>verm666</name>
    </author>
    <content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Введение&lt;/h2&gt;
&lt;p&gt;Supervisord - еще один из (кроме runit, launchd, systemd, upstart и т.п.) продуктов
занимающихся слежением за сервисами, запущенными в виде дочерних процессов.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://supervisord.org"&gt;Официальный сайт&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/supervisor/supervisor"&gt;Guthub репозиторий&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Написан на Pyhton. Для всех операций по управлению сервисами (start/stop/etc) как в web-interface, так
и в supervisorctl использует XML-RPC.&lt;/p&gt;
&lt;p&gt;О том как поставить и запустить сам supervisord можно прочитать на &lt;a class="reference external" href="http://supervisord.org"&gt;сайте проекта&lt;/a&gt;.
Ниже я опишу только те моменты, которые мне показались интересными.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;Добавление нового сервиса&lt;/h2&gt;
&lt;p&gt;Добавление нового сервиса осуществляется через редактирование основного конф. файла (supervisord.conf)
или созданием отдельного конф. файла, который будет подключен через директиву include.
Простой пример конфигурационного файла для демона, который должен быть запущен в двух
экземлплярах:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[program:daemon]&lt;/span&gt;
&lt;span class="na"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;vdm&lt;/span&gt;
&lt;span class="na"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/opt/bin/daemon-runner&lt;/span&gt;
&lt;span class="na"&gt;process_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(program_name)s_%(process_num)02d&lt;/span&gt;
&lt;span class="na"&gt;process_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;2&lt;/span&gt;
&lt;span class="na"&gt;stdout_logfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/%(program_name)s_%(process_num)02d.log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;На мой взгляд это основная фишка supervisord - возможность запуска нескольких экзепляров демона без лишних телодвижений.
В том же runit для этого пришлось бы создать два отдельных сервиса с идентичными настройками, а в upstart - один сервис
привязанный к событию и нечто, что emit'ит это событие (идеально подходит для конфигурации сетевых интерфейсов,
но вот запуск просто демона получается слишком сложным (см. настройку сетевой подсистемы в Ubuntu)).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;Порядок запуска сервисов&lt;/h2&gt;
&lt;p&gt;После прочтения документации вам может показаться, что в supervisord самая вменяемая реализация порядка запуска сервисов.
Это не так.&lt;/p&gt;
&lt;p&gt;В supervisord каждому сервису можно задать приоритет (priority). Сервис с наивысшим приоритетом включается
последним и выключается первым. Кроме этого для сервиса можно указать параметр startsecs, который указывает
время в секундах, которое сервис должен прожить, что бы считаться успешно запущенным.&lt;/p&gt;
&lt;p&gt;Рассмотрим простой пример:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Конф. файл supervisord:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[program:service1]&lt;/span&gt;
&lt;span class="na"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/opt/bin/service1&lt;/span&gt;
&lt;span class="na"&gt;priority&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;startsecs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;10&lt;/span&gt;
&lt;span class="na"&gt;stdout_logfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/tmp/service1.log&lt;/span&gt;

&lt;span class="k"&gt;[program:service2]&lt;/span&gt;
&lt;span class="na"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/opt/bin/service2&lt;/span&gt;
&lt;span class="na"&gt;priority&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;100&lt;/span&gt;
&lt;span class="na"&gt;startsecs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;10&lt;/span&gt;
&lt;span class="na"&gt;stdout_logfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/tmp/service2.log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Сервисы:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;root@development:/opt/bin# cat service1
&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Start: $(date -R)&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;exec &lt;/span&gt;dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/null &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1M
root@development:/opt/bin# cat service2
&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Start: $(date -R)&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;exec &lt;/span&gt;dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/null &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2M
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Самое логичное, что можно предположить - сервисы будут запускаться в следующем порядке:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Запуск service1;&lt;/li&gt;
&lt;li&gt;Ждем 10 секунд. Сервис работает. Считаем, что он запущен успешно;&lt;/li&gt;
&lt;li&gt;Запуск service2;&lt;/li&gt;
&lt;li&gt;Ждем 10 секунд. Сервис работает. Считаем, что он запущен успешно;&lt;/li&gt;
&lt;li&gt;Profit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Что получаем на самом деле:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# tail -f /var/log/supervisor/supervisord.log
00:33:17,868 INFO spawned: &amp;#39;service1&amp;#39; with pid 6532
00:33:17,897 INFO spawned: &amp;#39;service2&amp;#39; with pid 6533
00:33:27,997 INFO success: service1 entered RUNNING state, process
 has stayed up for &amp;gt; than 10 seconds (startsecs)
00:33:27,997 INFO success: service2 entered RUNNING state, process
 has stayed up for &amp;gt; than 10 seconds (startsecs)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="web-interface"&gt;
&lt;h2&gt;Web-interface&lt;/h2&gt;
&lt;p&gt;Web интерфейс доступен &amp;quot;из коробки&amp;quot;. Позволяет:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cмотреть статус сервисов;&lt;/li&gt;
&lt;li&gt;Смотреть лог сервиса;&lt;/li&gt;
&lt;li&gt;Очистить лог сервиса;&lt;/li&gt;
&lt;li&gt;Остановить/запустить сервис.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="events"&gt;
&lt;h2&gt;Events&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://supervisord.org/events.html"&gt;Документация на сайте проекта&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Event'ы еще одна значимая часть supervisord - позволяет реагировать на возникающие события (изменения статуса сервиса, новое сообщение в STDOUT/STDERR в логе сервиса и др. Полный список доступных событий - &lt;a class="reference external" href="http://supervisord.org/events.html#event-types"&gt;тут&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Примеры применения:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Послать письмо, если сервис упал;&lt;/li&gt;
&lt;li&gt;Послать изменение состояния в систему мониторинга;&lt;/li&gt;
&lt;li&gt;Перезапустить связанный сервис на этом или др. сервере (через XML-RPC).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Что бы начать реагировать на события необходимо настроить свой event-listener. Event-listener будет запущен supervisord как
дочерний процесс, а информация о событиях будет передаваться ему на STDIN, а через STDOUT он должен оповещать supervisord
о своем текущем статусе.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Пример настройки event-listener'а:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# cat /etc/supervisor/conf.d/listener.conf&lt;/span&gt;
&lt;span class="k"&gt;[eventlistener:watcher]&lt;/span&gt;
&lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/opt/bin/watcher.py&lt;/span&gt;
&lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;PROCESS_STATE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Пример event-listener'а:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;w&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;READY&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# debug&lt;/span&gt;
        &lt;span class="c"&gt;# parse line and do something&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;RESULT 2&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;OK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;В STDERR event-listener'а при перезапуске service1 будет писаться следующее:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;processname:service1 groupname:service1 from_state:RUNNING pid:9915ver:3.0
server:supervisor01 serial:47 pool:watcher poolserial:7
eventname:PROCESS_STATE_STOPPED len:68
processname:service1 groupname:service1 from_state:STOPPING pid:9915ver:3.0
server:supervisor01 serial:48 pool:watcher poolserial:8
eventname:PROCESS_STATE_STARTING len:66
processname:service1 groupname:service1 from_state:STOPPED tries:0ver:3.0
server:supervisor01 serial:49 pool:watcher poolserial:9
eventname:PROCESS_STATE_RUNNING len:68
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;Выводы&lt;/h2&gt;
&lt;p&gt;Вцелом supervisord выглядит как вменяемый законченный продукт (надо будет заняться исправлением поведения с порядком запуска
сервисов). Если сравнивать его со связкой &lt;a class="reference external" href="http://smarden.org/runit/"&gt;runit&lt;/a&gt; + &lt;a class="reference external" href="https://github.com/Undev/runit-man"&gt;runit-man&lt;/a&gt; он больше похож на то, что можно использовать в production
окружении. Но.. но основные достоинства supervisord просто бесполезны в случае использования chef:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Управление сервисами на удаленном сервере (через XML-RPC или supervisorctl -s SERVER_NAME). Вам это не надо, ведь у вас есть knife с поиском по ролям, нодам и тегам;&lt;/li&gt;
&lt;li&gt;Запуск нескольких инстансов демона без объявления нескольких сервисов. Опять же не особо полезно, веть за вас эти сервисы настраивает chef. И сколько их 1, 10 или 100 вцелом не так уж и важно.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ссылки по теме:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python.mirocommunity.org/video/1798/pyohio-2010-controlling-unix-p"&gt;Выступление Calvin Hendryx-Parker&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>

